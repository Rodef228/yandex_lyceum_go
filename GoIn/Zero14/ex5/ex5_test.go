package ex5

import (
    "errors"
    "testing"
)

func TestGetUTFLength(t *testing.T) {
    tests := []struct {
        input    []byte
        expected int
        err      error
    }{
        {[]byte("hello"), 5, nil},                          // –æ–±—ã—á–Ω–∞—è ASCII —Å—Ç—Ä–æ–∫–∞
        {[]byte("–ü—Ä–∏–≤–µ—Ç"), 6, nil},                         // —Å—Ç—Ä–æ–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        {[]byte{0xff, 0xfe, 0xfd}, 0, ErrInvalidUTF8},      // –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        {[]byte("„Åì„Çì„Å´„Å°„ÅØ"), 5, nil},                      // —Å—Ç—Ä–æ–∫–∞ –Ω–∞ —è–ø–æ–Ω—Å–∫–æ–º —è–∑—ã–∫–µ
        {[]byte("üëç"), 1, nil},                             // emoji
        {[]byte(""), 0, nil},                               // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

        // –ù–µ–ø–æ–ª–Ω—ã–µ –º–Ω–æ–≥–æ–±–∞–π—Ç–æ–≤—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        {[]byte{0xc2}, 0, ErrInvalidUTF8},                  // –ù–µ–ø–æ–ª–Ω–∞—è 2-–±–∏—Ç–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        {[]byte{0xe2, 0x82}, 0, ErrInvalidUTF8},            // –ù–µ–ø–æ–ª–Ω–∞—è 3-–±–∏—Ç–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        {[]byte{0xf0, 0x9f, 0x92}, 0, ErrInvalidUTF8},      // –ù–µ–ø–æ–ª–Ω–∞—è 4-–±–∏—Ç–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å

        // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –±–∞–π—Ç—ã
        {[]byte{0x80}, 0, ErrInvalidUTF8},                  // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–¥–∏–Ω–æ—á–Ω—ã–π –±–∞–π—Ç

        // –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤
        {[]byte{0xf8, 0x88, 0x80, 0x80}, 0, ErrInvalidUTF8},// –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ UTF-8

        // –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ)
        {[]byte{0xc1, 0x81}, 0, ErrInvalidUTF8},            // –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è ASCII-—Å–∏–º–≤–æ–ª–∞

        // –û–¥–∏–Ω–æ—á–Ω—ã–µ –±–∞–π—Ç—ã, –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–π
        {[]byte{0x80}, 0, ErrInvalidUTF8},                  // –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –æ–¥–∏–Ω–æ—á–Ω—ã–π –±–∞–π—Ç

        // –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–æ–≤–æ–π —Ç–æ—á–∫–∏ (overlong encoding)
        {[]byte{0xc0, 0x80}, 0, ErrInvalidUTF8},            // –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è U+0000

        // –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã (—Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã)
        {[]byte{0xed, 0xa0, 0x80}, 0, ErrInvalidUTF8},      // U+D800, –Ω–∞—á–∞–ª–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        {[]byte{0xed, 0xa0, 0x81}, 0, ErrInvalidUTF8},      // U+D801
        {[]byte{0xed, 0xaf, 0xbf}, 0, ErrInvalidUTF8},      // U+DBFF, –∫–æ–Ω–µ—Ü –≤–µ—Ä—Ö–Ω–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        {[]byte{0xed, 0xb0, 0x80}, 0, ErrInvalidUTF8},      // U+DC00, –Ω–∞—á–∞–ª–æ –Ω–∏–∂–Ω–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        {[]byte{0xed, 0xb0, 0x81}, 0, ErrInvalidUTF8},      // U+DC01
        {[]byte{0xed, 0xbf, 0xbf}, 0, ErrInvalidUTF8},      // U+DFFF, –∫–æ–Ω–µ—Ü –Ω–∏–∂–Ω–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    }

    for _, tt := range tests {
        result, err := GetUTFLength(tt.input)
        if result != tt.expected || !errors.Is(err, tt.err) {
            t.Errorf("For input %v, expected length %d and error %v, got length %d and error %v",
                tt.input, tt.expected, tt.err, result, err)
        }
    }
}
